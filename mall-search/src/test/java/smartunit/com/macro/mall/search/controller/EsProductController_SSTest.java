/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.search.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.common.api.CommonPage;
import com.macro.mall.common.api.CommonResult;
import com.macro.mall.search.controller.EsProductController;
import com.macro.mall.search.domain.EsProduct;
import com.macro.mall.search.domain.EsProductRelatedInfo;
import com.macro.mall.search.service.EsProductService;
import java.util.List;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.data.domain.Page;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class EsProductController_SSTest extends EsProductController_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_recommend_0()  throws Throwable  {
      EsProductController esProductController0 = new EsProductController();

      //prepare data for esProductService0
      Page<EsProduct> page0 = (Page<EsProduct>) mock(Page.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      EsProductService esProductService0 = mock(EsProductService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(page0).when(esProductService0).search(nullable(java.lang.String.class) , nullable(java.lang.Long.class) , nullable(java.lang.Long.class) , nullable(java.lang.Integer.class) , nullable(java.lang.Integer.class) , nullable(java.lang.Integer.class));

      //invoke method for esProductController0
      PrivateAccess.setVariable((Class<?>) EsProductController.class, esProductController0, "esProductService", (Object) esProductService0);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(0);
      CommonResult<CommonPage<EsProduct>> commonResult0 = esProductController0.search("span_not", long0, long0, (Integer) 0, integer0, integer0);
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }
  @Test(timeout = 4000)
  public void test_recommend_1()  throws Throwable  {
      EsProductController esProductController0 = new EsProductController();

      //prepare data for esProductService0
      Page<EsProduct> page0 = (Page<EsProduct>) mock(Page.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      EsProductService esProductService0 = mock(EsProductService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(page0).when(esProductService0).recommend(nullable(java.lang.Long.class) , nullable(java.lang.Integer.class) , nullable(java.lang.Integer.class));

      //invoke method for esProductController0
      PrivateAccess.setVariable((Class<?>) EsProductController.class, esProductController0, "esProductService", (Object) esProductService0);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(0);
      CommonResult<CommonPage<EsProduct>> commonResult0 = esProductController0.recommend(long0, integer0, integer0);
      assertEquals(200L, commonResult0.getCode());
  }
  @Test(timeout = 4000)
  public void test_delete_2()  throws Throwable  {
      EsProductController esProductController0 = new EsProductController();
      EsProductService esProductService0 = mock(EsProductService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

      //invoke method for esProductController0
      PrivateAccess.setVariable((Class<?>) EsProductController.class, esProductController0, "esProductService", (Object) esProductService0);
      Vector<Long> vector0 = new Vector<Long>();
      CommonResult<Object> commonResult0 = esProductController0.delete((List<Long>) vector0);
      assertEquals(200L, commonResult0.getCode());
  }
  @Test(timeout = 4000)
  public void test_search_3()  throws Throwable  {
      EsProductController esProductController0 = new EsProductController();

      //prepare data for esProductService0
      Page<EsProduct> page0 = (Page<EsProduct>) mock(Page.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      EsProductService esProductService0 = mock(EsProductService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(page0).when(esProductService0).search(nullable(java.lang.String.class) , nullable(java.lang.Integer.class) , nullable(java.lang.Integer.class));

      //invoke method for esProductController0
      PrivateAccess.setVariable((Class<?>) EsProductController.class, esProductController0, "esProductService", (Object) esProductService0);
      Integer integer0 = new Integer(1);
      CommonResult<CommonPage<EsProduct>> commonResult0 = esProductController0.search("0{aRXq}B7~", integer0, integer0);
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }
  @Test(timeout = 4000)
  public void test_searchRelatedInfo_4()  throws Throwable  {
      EsProductController esProductController0 = new EsProductController();

      //prepare data for esProductService0
      EsProductRelatedInfo esProductRelatedInfo0 = mock(EsProductRelatedInfo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      EsProductService esProductService0 = mock(EsProductService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(esProductRelatedInfo0).when(esProductService0).searchRelatedInfo(nullable(java.lang.String.class));

      //invoke method for esProductController0
      PrivateAccess.setVariable((Class<?>) EsProductController.class, esProductController0, "esProductService", (Object) esProductService0);
      CommonResult<EsProductRelatedInfo> commonResult0 = esProductController0.searchRelatedInfo("ieu");
      assertEquals(200L, commonResult0.getCode());
  }
  @Test(timeout = 4000)
  public void test_delete_5()  throws Throwable  {
      EsProductController esProductController0 = new EsProductController();
      EsProductService esProductService0 = mock(EsProductService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

      //invoke method for esProductController0
      PrivateAccess.setVariable((Class<?>) EsProductController.class, esProductController0, "esProductService", (Object) esProductService0);
      Long long0 = new Long(401L);
      CommonResult<Object> commonResult0 = esProductController0.delete(long0);
      assertEquals(200L, commonResult0.getCode());
  }
  @Test(timeout = 4000)
  public void test_importAllList_6()  throws Throwable  {
      EsProductController esProductController0 = new EsProductController();

      //prepare data for esProductService0
      EsProductService esProductService0 = mock(EsProductService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(72).when(esProductService0).importAll();

      //invoke method for esProductController0
      PrivateAccess.setVariable((Class<?>) EsProductController.class, esProductController0, "esProductService", (Object) esProductService0);
      CommonResult<Integer> commonResult0 = esProductController0.importAllList();
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }
  @Test(timeout = 4000)
  public void test_create_7()  throws Throwable  {
      EsProductController esProductController0 = new EsProductController();

      //prepare data for esProductService0
      EsProduct esProduct0 = mock(EsProduct.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      EsProductService esProductService0 = mock(EsProductService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(esProduct0).when(esProductService0).create(nullable(java.lang.Long.class));

      //invoke method for esProductController0
      PrivateAccess.setVariable((Class<?>) EsProductController.class, esProductController0, "esProductService", (Object) esProductService0);
      Long long0 = new Long((-1L));
      CommonResult<EsProduct> commonResult0 = esProductController0.create(long0);
      assertEquals(200L, commonResult0.getCode());
  }}
