/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.bo;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.bo.AdminUserDetails;
import com.macro.mall.model.UmsAdmin;
import com.macro.mall.model.UmsResource;
import java.util.LinkedList;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AdminUserDetails_SSTest extends AdminUserDetails_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_getPassword_0()  throws Throwable  {
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      LinkedList<UmsResource> linkedList0 = new LinkedList<UmsResource>();
      AdminUserDetails adminUserDetails0 = new AdminUserDetails(umsAdmin0, linkedList0);
      String string0 = adminUserDetails0.getPassword();
      assertNull(string0);
  }
  @Test(timeout = 4000)
  public void test_getUsername_1()  throws Throwable  {
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Vector<UmsResource> vector0 = new Vector<UmsResource>();
      AdminUserDetails adminUserDetails0 = new AdminUserDetails(umsAdmin0, vector0);
      String string0 = adminUserDetails0.getUsername();
      assertNull(string0);
  }
  @Test(timeout = 4000)
  public void test_isAccountNonLocked_2()  throws Throwable  {
      UmsAdmin umsAdmin0 = new UmsAdmin();
      LinkedList<UmsResource> linkedList0 = new LinkedList<UmsResource>();
      AdminUserDetails adminUserDetails0 = new AdminUserDetails(umsAdmin0, linkedList0);
      boolean boolean0 = adminUserDetails0.isCredentialsNonExpired();
      boolean boolean1 = adminUserDetails0.isAccountNonExpired();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }
  @Test(timeout = 4000)
  public void test_isAccountNonLocked_3()  throws Throwable  {

      //prepare data for umsAdmin0
      Integer integer0 = new Integer(327);
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(umsAdmin0).getStatus();
      LinkedList<UmsResource> linkedList0 = new LinkedList<UmsResource>();
      AdminUserDetails adminUserDetails0 = new AdminUserDetails(umsAdmin0, linkedList0);

      //invoke method for adminUserDetails0
      adminUserDetails0.isEnabled();
      boolean boolean0 = adminUserDetails0.isCredentialsNonExpired();
      assertTrue(boolean0);
  }
  @Test(timeout = 4000)
  public void test_getAuthorities_4()  throws Throwable  {
      UmsAdmin umsAdmin0 = new UmsAdmin();
      Vector<UmsResource> vector0 = new Vector<UmsResource>();
      UmsResource umsResource0 = new UmsResource();
      vector0.add(umsResource0);
      AdminUserDetails adminUserDetails0 = new AdminUserDetails(umsAdmin0, vector0);
      boolean boolean0 = adminUserDetails0.isAccountNonLocked();
      assertTrue(boolean0);
      

      //invoke method for adminUserDetails0
      adminUserDetails0.getAuthorities();

      //invoke method for adminUserDetails0
      assertTrue(adminUserDetails0.isAccountNonLocked());
  }}
