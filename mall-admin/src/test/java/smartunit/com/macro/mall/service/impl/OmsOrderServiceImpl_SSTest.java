/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.dao.OmsOrderDao;
import com.macro.mall.dao.OmsOrderOperateHistoryDao;
import com.macro.mall.dto.OmsMoneyInfoParam;
import com.macro.mall.dto.OmsOrderDeliveryParam;
import com.macro.mall.dto.OmsOrderDetail;
import com.macro.mall.dto.OmsOrderQueryParam;
import com.macro.mall.dto.OmsReceiverInfoParam;
import com.macro.mall.mapper.OmsOrderMapper;
import com.macro.mall.mapper.OmsOrderOperateHistoryMapper;
import com.macro.mall.model.OmsOrder;
import com.macro.mall.service.impl.OmsOrderServiceImpl;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class OmsOrderServiceImpl_SSTest extends OmsOrderServiceImpl_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_list_0()  throws Throwable  {
      OmsOrderServiceImpl omsOrderServiceImpl0 = new OmsOrderServiceImpl();

      //prepare data for omsOrderDao0
      Integer integer0 = new Integer((-1));
      OmsOrderDetail omsOrderDetail0 = mock(OmsOrderDetail.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(omsOrderDetail0).getPayType();
      doReturn("\u540E\u53F0\u7BA1\u7406\u5458").when(omsOrderDetail0).toString();
      OmsOrderDao omsOrderDao0 = mock(OmsOrderDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(omsOrderDetail0).when(omsOrderDao0).getDetail(nullable(java.lang.Long.class));

      //invoke method for omsOrderServiceImpl0
      PrivateAccess.setVariable((Class<?>) OmsOrderServiceImpl.class, omsOrderServiceImpl0, "orderDao", (Object) omsOrderDao0);
      OmsOrderQueryParam omsOrderQueryParam0 = mock(OmsOrderQueryParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Long long0 = new Long((-1L));

      //invoke method for omsOrderServiceImpl0
      omsOrderServiceImpl0.detail(long0);
      List<OmsOrder> list0 = omsOrderServiceImpl0.list(omsOrderQueryParam0, integer0, integer0);
      assertNull(list0);
  }
  @Test(timeout = 4000)
  public void test_delete_1()  throws Throwable  {
      OmsOrderServiceImpl omsOrderServiceImpl0 = new OmsOrderServiceImpl();

      //prepare data for omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(2).when(omsOrderMapper0).updateByExampleSelective(nullable(com.macro.mall.model.OmsOrder.class) , nullable(com.macro.mall.model.OmsOrderExample.class));

      //invoke method for omsOrderServiceImpl0
      PrivateAccess.setVariable((Class<?>) OmsOrderServiceImpl.class, omsOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      int int0 = omsOrderServiceImpl0.delete(arrayList0);
      assertEquals(2, int0);
  }
  @Test(timeout = 4000)
  public void test_delivery_2()  throws Throwable  {
      OmsOrderServiceImpl omsOrderServiceImpl0 = new OmsOrderServiceImpl();

      //prepare data for omsOrderDao0
      OmsOrderDao omsOrderDao0 = mock(OmsOrderDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(2).when(omsOrderDao0).delivery(ArgumentMatchers.<com.macro.mall.dto.OmsOrderDeliveryParam>anyList());

      //prepare data for omsOrderOperateHistoryDao0
      OmsOrderOperateHistoryDao omsOrderOperateHistoryDao0 = mock(OmsOrderOperateHistoryDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(2102).when(omsOrderOperateHistoryDao0).insertList(ArgumentMatchers.<com.macro.mall.model.OmsOrderOperateHistory>anyList());

      //invoke method for omsOrderServiceImpl0
      PrivateAccess.setVariable((Class<?>) OmsOrderServiceImpl.class, omsOrderServiceImpl0, "orderOperateHistoryDao", (Object) omsOrderOperateHistoryDao0);

      //invoke method for omsOrderServiceImpl0
      PrivateAccess.setVariable((Class<?>) OmsOrderServiceImpl.class, omsOrderServiceImpl0, "orderDao", (Object) omsOrderDao0);
      Vector<OmsOrderDeliveryParam> vector0 = new Vector<OmsOrderDeliveryParam>();
      Long long0 = new Long(0L);
      OmsOrderDeliveryParam omsOrderDeliveryParam0 = mock(OmsOrderDeliveryParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(omsOrderDeliveryParam0).getOrderId();
      vector0.add(omsOrderDeliveryParam0);
      int int0 = omsOrderServiceImpl0.delivery(vector0);
      assertEquals(2, int0);
  }
  @Test(timeout = 4000)
  public void test_updateNote_3()  throws Throwable  {
      OmsOrderServiceImpl omsOrderServiceImpl0 = new OmsOrderServiceImpl();

      //prepare data for omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(654).when(omsOrderMapper0).updateByPrimaryKeySelective(nullable(com.macro.mall.model.OmsOrder.class));

      //prepare data for omsOrderOperateHistoryMapper0
      OmsOrderOperateHistoryMapper omsOrderOperateHistoryMapper0 = mock(OmsOrderOperateHistoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(2).when(omsOrderOperateHistoryMapper0).insert(nullable(com.macro.mall.model.OmsOrderOperateHistory.class));

      //invoke method for omsOrderServiceImpl0
      PrivateAccess.setVariable((Class<?>) OmsOrderServiceImpl.class, omsOrderServiceImpl0, "orderOperateHistoryMapper", (Object) omsOrderOperateHistoryMapper0);

      //invoke method for omsOrderServiceImpl0
      PrivateAccess.setVariable((Class<?>) OmsOrderServiceImpl.class, omsOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(0);
      int int0 = omsOrderServiceImpl0.updateNote(long0, "rb1:y^).%", integer0);
      assertEquals(654, int0);
  }
  @Test(timeout = 4000)
  public void test_updateMoneyInfo_4()  throws Throwable  {
      OmsOrderServiceImpl omsOrderServiceImpl0 = new OmsOrderServiceImpl();

      //prepare data for omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(omsOrderMapper0).updateByPrimaryKeySelective(nullable(com.macro.mall.model.OmsOrder.class));

      //prepare data for omsOrderOperateHistoryMapper0
      OmsOrderOperateHistoryMapper omsOrderOperateHistoryMapper0 = mock(OmsOrderOperateHistoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(omsOrderOperateHistoryMapper0).insert(nullable(com.macro.mall.model.OmsOrderOperateHistory.class));

      //invoke method for omsOrderServiceImpl0
      PrivateAccess.setVariable((Class<?>) OmsOrderServiceImpl.class, omsOrderServiceImpl0, "orderOperateHistoryMapper", (Object) omsOrderOperateHistoryMapper0);

      //invoke method for omsOrderServiceImpl0
      PrivateAccess.setVariable((Class<?>) OmsOrderServiceImpl.class, omsOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);

      //prepare data for omsMoneyInfoParam0
      Integer integer0 = new Integer(2);
      Long long0 = new Long(1336L);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      OmsMoneyInfoParam omsMoneyInfoParam0 = mock(OmsMoneyInfoParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(bigDecimal0).when(omsMoneyInfoParam0).getDiscountAmount();
      doReturn(bigDecimal0).when(omsMoneyInfoParam0).getFreightAmount();
      doReturn(long0, long0).when(omsMoneyInfoParam0).getOrderId();
      doReturn(integer0).when(omsMoneyInfoParam0).getStatus();
      int int0 = omsOrderServiceImpl0.updateMoneyInfo(omsMoneyInfoParam0);
      assertEquals((-1), int0);
  }
  @Test(timeout = 4000)
  public void test_close_5()  throws Throwable  {
      OmsOrderServiceImpl omsOrderServiceImpl0 = new OmsOrderServiceImpl();

      //prepare data for omsOrderOperateHistoryDao0
      OmsOrderOperateHistoryDao omsOrderOperateHistoryDao0 = mock(OmsOrderOperateHistoryDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(4).when(omsOrderOperateHistoryDao0).insertList(ArgumentMatchers.<com.macro.mall.model.OmsOrderOperateHistory>anyList());

      //prepare data for omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(omsOrderMapper0).updateByExampleSelective(nullable(com.macro.mall.model.OmsOrder.class) , nullable(com.macro.mall.model.OmsOrderExample.class));

      //invoke method for omsOrderServiceImpl0
      PrivateAccess.setVariable((Class<?>) OmsOrderServiceImpl.class, omsOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);

      //invoke method for omsOrderServiceImpl0
      PrivateAccess.setVariable((Class<?>) OmsOrderServiceImpl.class, omsOrderServiceImpl0, "orderOperateHistoryDao", (Object) omsOrderOperateHistoryDao0);
      Stack<Long> stack0 = new Stack<Long>();
      Long long0 = new Long(0L);
      stack0.add(long0);
      int int0 = omsOrderServiceImpl0.close(stack0, "Not a getter method");
      assertEquals((-1), int0);
  }
  @Test(timeout = 4000)
  public void test_updateReceiverInfo_6()  throws Throwable  {
      OmsOrderServiceImpl omsOrderServiceImpl0 = new OmsOrderServiceImpl();

      //prepare data for omsOrderMapper0
      OmsOrderMapper omsOrderMapper0 = mock(OmsOrderMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(4).when(omsOrderMapper0).updateByPrimaryKeySelective(nullable(com.macro.mall.model.OmsOrder.class));

      //prepare data for omsOrderOperateHistoryMapper0
      OmsOrderOperateHistoryMapper omsOrderOperateHistoryMapper0 = mock(OmsOrderOperateHistoryMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(3904).when(omsOrderOperateHistoryMapper0).insert(nullable(com.macro.mall.model.OmsOrderOperateHistory.class));

      //invoke method for omsOrderServiceImpl0
      PrivateAccess.setVariable((Class<?>) OmsOrderServiceImpl.class, omsOrderServiceImpl0, "orderOperateHistoryMapper", (Object) omsOrderOperateHistoryMapper0);

      //invoke method for omsOrderServiceImpl0
      PrivateAccess.setVariable((Class<?>) OmsOrderServiceImpl.class, omsOrderServiceImpl0, "orderMapper", (Object) omsOrderMapper0);

      //prepare data for omsReceiverInfoParam0
      Integer integer0 = new Integer(0);
      Long long0 = new Long(1403L);
      OmsReceiverInfoParam omsReceiverInfoParam0 = mock(OmsReceiverInfoParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0).when(omsReceiverInfoParam0).getOrderId();
      doReturn("\u4FEE\u6539\u5907\u6CE8\u4FE1\u606F\uFF1A").when(omsReceiverInfoParam0).getReceiverCity();
      doReturn("U9W").when(omsReceiverInfoParam0).getReceiverDetailAddress();
      doReturn("\u5B8C\u6210\u53D1\u8D27").when(omsReceiverInfoParam0).getReceiverName();
      doReturn("\u4FEE\u6539\u8D39\u7528\u4FE1\u606F").when(omsReceiverInfoParam0).getReceiverPhone();
      doReturn("\u4FEE\u6539\u6536\u8D27\u4EBA\u4FE1\u606F").when(omsReceiverInfoParam0).getReceiverPostCode();
      doReturn("\u8BA2\u5355\u5173\u95ED:").when(omsReceiverInfoParam0).getReceiverProvince();
      doReturn("payType").when(omsReceiverInfoParam0).getReceiverRegion();
      doReturn(integer0).when(omsReceiverInfoParam0).getStatus();
      int int0 = omsOrderServiceImpl0.updateReceiverInfo(omsReceiverInfoParam0);
      assertEquals(4, int0);
  }}
