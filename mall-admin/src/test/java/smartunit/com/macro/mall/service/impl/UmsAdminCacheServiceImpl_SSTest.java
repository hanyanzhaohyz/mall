/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.macro.mall.common.service.RedisService;
import com.macro.mall.dao.UmsAdminRoleRelationDao;
import com.macro.mall.mapper.UmsAdminRoleRelationMapper;
import com.macro.mall.model.UmsAdmin;
import com.macro.mall.model.UmsAdminRoleRelation;
import com.macro.mall.model.UmsResource;
import com.macro.mall.service.UmsAdminService;
import com.macro.mall.service.impl.UmsAdminCacheServiceImpl;
import java.util.ArrayList;
import java.util.LinkedList;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class UmsAdminCacheServiceImpl_SSTest extends UmsAdminCacheServiceImpl_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_delResourceList_0()  throws Throwable  {
      UmsAdminCacheServiceImpl umsAdminCacheServiceImpl0 = new UmsAdminCacheServiceImpl();
      Long long0 = new Long(4328L);
      // Undeclared exception!
      try { 

        //invoke method for umsAdminCacheServiceImpl0
        umsAdminCacheServiceImpl0.delResourceList(long0);
      
      } catch(Throwable e) {
         //
         // Exception Name: NullPointerException
         // no message in exception (getMessage() returned null)
         //
      }
  }
  @Test(timeout = 4000)
  public void test_getAdmin_1()  throws Throwable  {
      UmsAdminCacheServiceImpl umsAdminCacheServiceImpl0 = new UmsAdminCacheServiceImpl();

      //prepare data for redisService0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsAdmin0).when(redisService0).get(nullable(java.lang.String.class));

      //invoke method for umsAdminCacheServiceImpl0
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "redisService", (Object) redisService0);
      UmsAdmin umsAdmin1 = umsAdminCacheServiceImpl0.getAdmin("reactor.core.publisher.MonoTimeout");
      assertNull(umsAdmin1.getNote());
  }
  @Test(timeout = 4000)
  public void test_setResourceList_2()  throws Throwable  {
      UmsAdminCacheServiceImpl umsAdminCacheServiceImpl0 = new UmsAdminCacheServiceImpl();
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Long long0 = new Long(0L);

      //invoke method for umsAdminCacheServiceImpl0
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "REDIS_EXPIRE", (Object) long0);

      //invoke method for umsAdminCacheServiceImpl0
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "redisService", (Object) redisService0);
      LinkedList<UmsResource> linkedList0 = new LinkedList<UmsResource>();
      umsAdminCacheServiceImpl0.setResourceList(long0, linkedList0);
      assertEquals(0, linkedList0.size());
  }
  @Test(timeout = 4000)
  public void test_delResourceListByResource_3()  throws Throwable  {
      UmsAdminCacheServiceImpl umsAdminCacheServiceImpl0 = new UmsAdminCacheServiceImpl();

      //prepare data for umsAdminRoleRelationDao0
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      UmsAdminRoleRelationDao umsAdminRoleRelationDao0 = mock(UmsAdminRoleRelationDao.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(umsAdminRoleRelationDao0).getAdminIdList(nullable(java.lang.Long.class));
      Long long0 = new Long((-1L));

      //invoke method for umsAdminCacheServiceImpl0
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "adminRoleRelationDao", (Object) umsAdminRoleRelationDao0);

      //invoke method for umsAdminCacheServiceImpl0
      umsAdminCacheServiceImpl0.delResourceListByResource(long0);
  }
  @Test(timeout = 4000)
  public void test_setAdmin_4()  throws Throwable  {
      UmsAdminCacheServiceImpl umsAdminCacheServiceImpl0 = new UmsAdminCacheServiceImpl();
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Long long0 = new Long(189L);

      //invoke method for umsAdminCacheServiceImpl0
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "REDIS_EXPIRE", (Object) long0);

      //invoke method for umsAdminCacheServiceImpl0
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "redisService", (Object) redisService0);

      //prepare data for umsAdmin0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1.0").when(umsAdmin0).getUsername();

      //invoke method for umsAdminCacheServiceImpl0
      umsAdminCacheServiceImpl0.setAdmin(umsAdmin0);
  }
  @Test(timeout = 4000)
  public void test_delAdmin_5()  throws Throwable  {
      UmsAdminCacheServiceImpl umsAdminCacheServiceImpl0 = new UmsAdminCacheServiceImpl();
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

      //prepare data for umsAdminService0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      UmsAdminService umsAdminService0 = mock(UmsAdminService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsAdmin0).when(umsAdminService0).getItem(nullable(java.lang.Long.class));
      Long long0 = new Long((-395L));

      //invoke method for umsAdminCacheServiceImpl0
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "adminService", (Object) umsAdminService0);

      //invoke method for umsAdminCacheServiceImpl0
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "redisService", (Object) redisService0);

      //invoke method for umsAdminCacheServiceImpl0
      umsAdminCacheServiceImpl0.delAdmin(long0);
  }
  @Test(timeout = 4000)
  public void test_delResourceListByRoleIds_6()  throws Throwable  {
      UmsAdminCacheServiceImpl umsAdminCacheServiceImpl0 = new UmsAdminCacheServiceImpl();
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

      //prepare data for umsAdminRoleRelationMapper0
      ArrayList<UmsAdminRoleRelation> arrayList0 = new ArrayList<UmsAdminRoleRelation>();
      UmsAdminRoleRelation umsAdminRoleRelation0 = mock(UmsAdminRoleRelation.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      arrayList0.add(umsAdminRoleRelation0);
      UmsAdminRoleRelationMapper umsAdminRoleRelationMapper0 = mock(UmsAdminRoleRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(umsAdminRoleRelationMapper0).selectByExample(nullable(com.macro.mall.model.UmsAdminRoleRelationExample.class));

      //invoke method for umsAdminCacheServiceImpl0
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "adminRoleRelationMapper", (Object) umsAdminRoleRelationMapper0);

      //invoke method for umsAdminCacheServiceImpl0
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "redisService", (Object) redisService0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      umsAdminCacheServiceImpl0.delResourceListByRoleIds(linkedList0);
      assertEquals(0, linkedList0.size());
  }
  @Test(timeout = 4000)
  public void test_delResourceListByRole_7()  throws Throwable  {
      UmsAdminCacheServiceImpl umsAdminCacheServiceImpl0 = new UmsAdminCacheServiceImpl();
      RedisService redisService0 = mock(RedisService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

      //prepare data for umsAdminRoleRelationMapper0
      ArrayList<UmsAdminRoleRelation> arrayList0 = new ArrayList<UmsAdminRoleRelation>();
      UmsAdminRoleRelation umsAdminRoleRelation0 = mock(UmsAdminRoleRelation.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      arrayList0.add(umsAdminRoleRelation0);
      UmsAdminRoleRelationMapper umsAdminRoleRelationMapper0 = mock(UmsAdminRoleRelationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(umsAdminRoleRelationMapper0).selectByExample(nullable(com.macro.mall.model.UmsAdminRoleRelationExample.class));
      Long long0 = new Long(0L);

      //invoke method for umsAdminCacheServiceImpl0
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "adminRoleRelationMapper", (Object) umsAdminRoleRelationMapper0);

      //invoke method for umsAdminCacheServiceImpl0
      PrivateAccess.setVariable((Class<?>) UmsAdminCacheServiceImpl.class, umsAdminCacheServiceImpl0, "redisService", (Object) redisService0);

      //invoke method for umsAdminCacheServiceImpl0
      umsAdminCacheServiceImpl0.delResourceListByRole(long0);
  }}
