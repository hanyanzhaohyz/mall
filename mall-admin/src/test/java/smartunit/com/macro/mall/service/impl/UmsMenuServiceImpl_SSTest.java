/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.macro.mall.dto.UmsMenuNode;
import com.macro.mall.mapper.UmsMenuMapper;
import com.macro.mall.model.UmsMenu;
import com.macro.mall.service.impl.UmsMenuServiceImpl;
import java.util.List;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class UmsMenuServiceImpl_SSTest extends UmsMenuServiceImpl_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_getItem_0()  throws Throwable  {
      UmsMenuServiceImpl umsMenuServiceImpl0 = new UmsMenuServiceImpl();

      //prepare data for umsMenuMapper0
      UmsMenu umsMenu0 = mock(UmsMenu.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      UmsMenuMapper umsMenuMapper0 = mock(UmsMenuMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMenu0).when(umsMenuMapper0).selectByPrimaryKey(nullable(java.lang.Long.class));

      //invoke method for umsMenuServiceImpl0
      PrivateAccess.setVariable((Class<?>) UmsMenuServiceImpl.class, umsMenuServiceImpl0, "menuMapper", (Object) umsMenuMapper0);
      Long long0 = new Long(717L);
      UmsMenu umsMenu1 = umsMenuServiceImpl0.getItem(long0);
      assertNull(umsMenu1.getName());
  }
  @Test(timeout = 4000)
  public void test_delete_1()  throws Throwable  {
      UmsMenuServiceImpl umsMenuServiceImpl0 = new UmsMenuServiceImpl();

      //prepare data for umsMenuMapper0
      UmsMenuMapper umsMenuMapper0 = mock(UmsMenuMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(umsMenuMapper0).deleteByPrimaryKey(nullable(java.lang.Long.class));

      //invoke method for umsMenuServiceImpl0
      PrivateAccess.setVariable((Class<?>) UmsMenuServiceImpl.class, umsMenuServiceImpl0, "menuMapper", (Object) umsMenuMapper0);
      int int0 = umsMenuServiceImpl0.delete((Long) null);
      assertEquals(1, int0);
  }
  @Test(timeout = 4000)
  public void test_updateHidden_2()  throws Throwable  {
      UmsMenuServiceImpl umsMenuServiceImpl0 = new UmsMenuServiceImpl();

      //prepare data for umsMenuMapper0
      UmsMenuMapper umsMenuMapper0 = mock(UmsMenuMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(umsMenuMapper0).updateByPrimaryKeySelective(nullable(com.macro.mall.model.UmsMenu.class));

      //invoke method for umsMenuServiceImpl0
      PrivateAccess.setVariable((Class<?>) UmsMenuServiceImpl.class, umsMenuServiceImpl0, "menuMapper", (Object) umsMenuMapper0);
      Long long0 = new Long(1L);
      Integer integer0 = new Integer(3148);
      int int0 = umsMenuServiceImpl0.updateHidden(long0, integer0);
      assertEquals(0, int0);
  }
  @Test(timeout = 4000)
  public void test_list_3()  throws Throwable  {
      UmsMenuServiceImpl umsMenuServiceImpl0 = new UmsMenuServiceImpl();

      //prepare data for umsMenuMapper0
      Vector<UmsMenu> vector0 = new Vector<UmsMenu>();
      UmsMenuMapper umsMenuMapper0 = mock(UmsMenuMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(umsMenuMapper0).selectByExample(nullable(com.macro.mall.model.UmsMenuExample.class));

      //invoke method for umsMenuServiceImpl0
      PrivateAccess.setVariable((Class<?>) UmsMenuServiceImpl.class, umsMenuServiceImpl0, "menuMapper", (Object) umsMenuMapper0);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(41);
      List<UmsMenu> list0 = umsMenuServiceImpl0.list(long0, integer0, integer0);
      assertEquals(0, list0.size());
  }
  @Test(timeout = 4000)
  public void test_update_4()  throws Throwable  {
      UmsMenuServiceImpl umsMenuServiceImpl0 = new UmsMenuServiceImpl();

      //prepare data for umsMenuMapper0
      UmsMenu umsMenu0 = mock(UmsMenu.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      UmsMenuMapper umsMenuMapper0 = mock(UmsMenuMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsMenu0).when(umsMenuMapper0).selectByPrimaryKey(nullable(java.lang.Long.class));
      doReturn(43).when(umsMenuMapper0).updateByPrimaryKeySelective(nullable(com.macro.mall.model.UmsMenu.class));

      //invoke method for umsMenuServiceImpl0
      PrivateAccess.setVariable((Class<?>) UmsMenuServiceImpl.class, umsMenuServiceImpl0, "menuMapper", (Object) umsMenuMapper0);

      //prepare data for umsMenu1
      Long long0 = new Long(333L);
      UmsMenu umsMenu1 = mock(UmsMenu.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0).when(umsMenu1).getParentId();
      // Undeclared exception!
      try { 

        //invoke method for umsMenuServiceImpl0
        umsMenuServiceImpl0.update(long0, umsMenu1);
      
      } catch(Throwable e) {
         //
         // Exception Name: NullPointerException
         // no message in exception (getMessage() returned null)
         //
      }
  }
  @Test(timeout = 4000)
  public void test_create_5()  throws Throwable  {
      UmsMenuServiceImpl umsMenuServiceImpl0 = new UmsMenuServiceImpl();
      UmsMenuMapper umsMenuMapper0 = mock(UmsMenuMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

      //invoke method for umsMenuServiceImpl0
      PrivateAccess.setVariable((Class<?>) UmsMenuServiceImpl.class, umsMenuServiceImpl0, "menuMapper", (Object) umsMenuMapper0);

      //prepare data for umsMenu0
      Long long0 = new Long(0L);
      UmsMenu umsMenu0 = mock(UmsMenu.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMenu0).getParentId();
      int int0 = umsMenuServiceImpl0.create(umsMenu0);
      assertEquals(0, int0);
  }
  @Test(timeout = 4000)
  public void test_update_6()  throws Throwable  {
      UmsMenuServiceImpl umsMenuServiceImpl0 = new UmsMenuServiceImpl();
      UmsMenuMapper umsMenuMapper0 = mock(UmsMenuMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

      //invoke method for umsMenuServiceImpl0
      PrivateAccess.setVariable((Class<?>) UmsMenuServiceImpl.class, umsMenuServiceImpl0, "menuMapper", (Object) umsMenuMapper0);

      //prepare data for umsMenu0
      Long long0 = new Long(333L);
      UmsMenu umsMenu0 = mock(UmsMenu.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(umsMenu0).getParentId();
      int int0 = umsMenuServiceImpl0.update(long0, umsMenu0);
      assertEquals(0, int0);
  }
  @Test(timeout = 4000)
  public void test_treeList_7()  throws Throwable  {
      UmsMenuServiceImpl umsMenuServiceImpl0 = new UmsMenuServiceImpl();
      Vector<UmsMenu> vector0 = new Vector<UmsMenu>();
      UmsMenuNode umsMenuNode0 = new UmsMenuNode();
      Long long0 = new Long(0L);
      umsMenuNode0.setParentId(long0);
      vector0.add(umsMenuNode0);
      UmsMenuMapper umsMenuMapper0 = mock(UmsMenuMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(umsMenuMapper0).selectByExample(nullable(com.macro.mall.model.UmsMenuExample.class));
      PrivateAccess.setVariable((Class<?>) UmsMenuServiceImpl.class, umsMenuServiceImpl0, "menuMapper", (Object) umsMenuMapper0);
      List<UmsMenuNode> list0 = umsMenuServiceImpl0.treeList();
      assertFalse(list0.contains(umsMenuNode0));
      assertFalse(list0.isEmpty());
  }}
