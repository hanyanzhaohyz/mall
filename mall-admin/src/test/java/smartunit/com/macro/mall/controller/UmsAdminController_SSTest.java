/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.common.api.CommonPage;
import com.macro.mall.common.api.CommonResult;
import com.macro.mall.controller.UmsAdminController;
import com.macro.mall.dto.UmsAdminLoginParam;
import com.macro.mall.dto.UmsAdminParam;
import com.macro.mall.dto.UpdateAdminPasswordParam;
import com.macro.mall.model.UmsAdmin;
import com.macro.mall.model.UmsMenu;
import com.macro.mall.model.UmsRole;
import com.macro.mall.service.UmsAdminService;
import com.macro.mall.service.UmsRoleService;
import com.macro.mall.service.impl.UmsAdminServiceImpl;
import java.security.Principal;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import javax.servlet.http.HttpServletRequest;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class UmsAdminController_SSTest extends UmsAdminController_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_logout_00()  throws Throwable  {
      UmsAdminController umsAdminController0 = new UmsAdminController();
      CommonResult commonResult0 = umsAdminController0.logout();
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }
  @Test(timeout = 4000)
  public void test_list_01()  throws Throwable  {
      UmsAdminController umsAdminController0 = new UmsAdminController();

      //prepare data for umsAdminService0
      LinkedList<UmsAdmin> linkedList0 = new LinkedList<UmsAdmin>();
      UmsAdminService umsAdminService0 = mock(UmsAdminService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(umsAdminService0).list(nullable(java.lang.String.class) , nullable(java.lang.Integer.class) , nullable(java.lang.Integer.class));

      //invoke method for umsAdminController0
      PrivateAccess.setVariable((Class<?>) UmsAdminController.class, umsAdminController0, "adminService", (Object) umsAdminService0);
      Integer integer0 = new Integer(734);
      CommonResult<CommonPage<UmsAdmin>> commonResult0 = umsAdminController0.list("=>aG:W", integer0, (Integer) null);
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }
  @Test(timeout = 4000)
  public void test_getRoleList_02()  throws Throwable  {
      UmsAdminController umsAdminController0 = new UmsAdminController();

      //prepare data for umsAdminService0
      Vector<UmsRole> vector0 = new Vector<UmsRole>();
      UmsAdminService umsAdminService0 = mock(UmsAdminService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(umsAdminService0).getRoleList(nullable(java.lang.Long.class));

      //invoke method for umsAdminController0
      PrivateAccess.setVariable((Class<?>) UmsAdminController.class, umsAdminController0, "adminService", (Object) umsAdminService0);
      Long long0 = new Long(359L);
      CommonResult<List<UmsRole>> commonResult0 = umsAdminController0.getRoleList(long0);
      assertEquals(200L, commonResult0.getCode());
  }
  @Test(timeout = 4000)
  public void test_getItem_03()  throws Throwable  {
      UmsAdminController umsAdminController0 = new UmsAdminController();

      //prepare data for umsAdminService0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      UmsAdminService umsAdminService0 = mock(UmsAdminService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsAdmin0).when(umsAdminService0).getItem(nullable(java.lang.Long.class));

      //invoke method for umsAdminController0
      PrivateAccess.setVariable((Class<?>) UmsAdminController.class, umsAdminController0, "adminService", (Object) umsAdminService0);
      Long long0 = new Long(159L);
      CommonResult<UmsAdmin> commonResult0 = umsAdminController0.getItem(long0);
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }
  @Test(timeout = 4000)
  public void test_updateRole_04()  throws Throwable  {
      UmsAdminController umsAdminController0 = new UmsAdminController();

      //prepare data for umsAdminService0
      UmsAdminService umsAdminService0 = mock(UmsAdminService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(umsAdminService0).updateRole(nullable(java.lang.Long.class) , ArgumentMatchers.<java.lang.Long>anyList());

      //invoke method for umsAdminController0
      PrivateAccess.setVariable((Class<?>) UmsAdminController.class, umsAdminController0, "adminService", (Object) umsAdminService0);
      Long long0 = Long.decode("690");
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      CommonResult commonResult0 = umsAdminController0.updateRole(long0, arrayList0);
      assertEquals(500L, commonResult0.getCode());
  }
  @Test(timeout = 4000)
  public void test_updateRole_05()  throws Throwable  {
      UmsAdminController umsAdminController0 = new UmsAdminController();

      //prepare data for umsAdminService0
      UmsAdminService umsAdminService0 = mock(UmsAdminService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(47).when(umsAdminService0).updateRole(nullable(java.lang.Long.class) , ArgumentMatchers.<java.lang.Long>anyList());

      //invoke method for umsAdminController0
      PrivateAccess.setVariable((Class<?>) UmsAdminController.class, umsAdminController0, "adminService", (Object) umsAdminService0);
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      CommonResult commonResult0 = umsAdminController0.updateRole((Long) null, arrayList0);
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }
  @Test(timeout = 4000)
  public void test_update_06()  throws Throwable  {
      UmsAdminController umsAdminController0 = new UmsAdminController();

      //prepare data for umsAdminService0
      UmsAdminService umsAdminService0 = mock(UmsAdminService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1073741824).when(umsAdminService0).update(nullable(java.lang.Long.class) , nullable(com.macro.mall.model.UmsAdmin.class));

      //invoke method for umsAdminController0
      PrivateAccess.setVariable((Class<?>) UmsAdminController.class, umsAdminController0, "adminService", (Object) umsAdminService0);
      Long long0 = Long.getLong("]", (long) 1073741824);
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      CommonResult commonResult0 = umsAdminController0.update(long0, umsAdmin0);
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }
  @Test(timeout = 4000)
  public void test_update_07()  throws Throwable  {
      UmsAdminController umsAdminController0 = new UmsAdminController();

      //prepare data for umsAdminService0
      UmsAdminService umsAdminService0 = mock(UmsAdminService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-3)).when(umsAdminService0).update(nullable(java.lang.Long.class) , nullable(com.macro.mall.model.UmsAdmin.class));

      //invoke method for umsAdminController0
      PrivateAccess.setVariable((Class<?>) UmsAdminController.class, umsAdminController0, "adminService", (Object) umsAdminService0);
      Long long0 = new Long((-1L));
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      CommonResult commonResult0 = umsAdminController0.update(long0, umsAdmin0);
      assertEquals(500L, commonResult0.getCode());
  }
  @Test(timeout = 4000)
  public void test_register_08()  throws Throwable  {
      UmsAdminController umsAdminController0 = new UmsAdminController();

      //prepare data for umsAdminService0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      UmsAdminService umsAdminService0 = mock(UmsAdminService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsAdmin0).when(umsAdminService0).register(nullable(com.macro.mall.dto.UmsAdminParam.class));

      //invoke method for umsAdminController0
      PrivateAccess.setVariable((Class<?>) UmsAdminController.class, umsAdminController0, "adminService", (Object) umsAdminService0);
      UmsAdminParam umsAdminParam0 = mock(UmsAdminParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      CommonResult<UmsAdmin> commonResult0 = umsAdminController0.register(umsAdminParam0);
      assertEquals(200L, commonResult0.getCode());
  }
  @Test(timeout = 4000)
  public void test_updatePassword_09()  throws Throwable  {
      UmsAdminController umsAdminController0 = new UmsAdminController();

      //prepare data for umsAdminService0
      UmsAdminService umsAdminService0 = mock(UmsAdminService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(130561).when(umsAdminService0).updatePassword(nullable(com.macro.mall.dto.UpdateAdminPasswordParam.class));

      //invoke method for umsAdminController0
      PrivateAccess.setVariable((Class<?>) UmsAdminController.class, umsAdminController0, "adminService", (Object) umsAdminService0);
      UpdateAdminPasswordParam updateAdminPasswordParam0 = mock(UpdateAdminPasswordParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      CommonResult commonResult0 = umsAdminController0.updatePassword(updateAdminPasswordParam0);
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }
  @Test(timeout = 4000)
  public void test_delete_10()  throws Throwable  {
      UmsAdminController umsAdminController0 = new UmsAdminController();

      //prepare data for umsAdminService0
      UmsAdminService umsAdminService0 = mock(UmsAdminService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(2736).when(umsAdminService0).delete(nullable(java.lang.Long.class));

      //invoke method for umsAdminController0
      PrivateAccess.setVariable((Class<?>) UmsAdminController.class, umsAdminController0, "adminService", (Object) umsAdminService0);
      Long long0 = new Long(0L);
      CommonResult commonResult0 = umsAdminController0.delete(long0);
      assertEquals(200L, commonResult0.getCode());
  }
  @Test(timeout = 4000)
  public void test_updatePassword_11()  throws Throwable  {
      UmsAdminController umsAdminController0 = new UmsAdminController();
      UmsAdminServiceImpl umsAdminServiceImpl0 = new UmsAdminServiceImpl();

      //invoke method for umsAdminController0
      PrivateAccess.setVariable((Class<?>) UmsAdminController.class, umsAdminController0, "adminService", (Object) umsAdminServiceImpl0);
      UpdateAdminPasswordParam updateAdminPasswordParam0 = new UpdateAdminPasswordParam();
      CommonResult commonResult0 = umsAdminController0.updatePassword(updateAdminPasswordParam0);
      assertEquals("\u63D0\u4EA4\u53C2\u6570\u4E0D\u5408\u6CD5", commonResult0.getMessage());
  }
  @Test(timeout = 4000)
  public void test_updateStatus_12()  throws Throwable  {
      UmsAdminController umsAdminController0 = new UmsAdminController();

      //prepare data for umsAdminService0
      UmsAdminService umsAdminService0 = mock(UmsAdminService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(umsAdminService0).update(nullable(java.lang.Long.class) , nullable(com.macro.mall.model.UmsAdmin.class));

      //invoke method for umsAdminController0
      PrivateAccess.setVariable((Class<?>) UmsAdminController.class, umsAdminController0, "adminService", (Object) umsAdminService0);
      Integer integer0 = Integer.getInteger("8-1LPEVEzowtL", 0);
      CommonResult commonResult0 = umsAdminController0.updateStatus((Long) null, integer0);
      assertEquals("\u64CD\u4F5C\u5931\u8D25", commonResult0.getMessage());
  }
  @Test(timeout = 4000)
  public void test_updateStatus_13()  throws Throwable  {
      UmsAdminController umsAdminController0 = new UmsAdminController();

      //prepare data for umsAdminService0
      UmsAdminService umsAdminService0 = mock(UmsAdminService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(47).when(umsAdminService0).update(nullable(java.lang.Long.class) , nullable(com.macro.mall.model.UmsAdmin.class));

      //invoke method for umsAdminController0
      PrivateAccess.setVariable((Class<?>) UmsAdminController.class, umsAdminController0, "adminService", (Object) umsAdminService0);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      CommonResult commonResult0 = umsAdminController0.updateStatus(long0, integer0);
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }
  @Test(timeout = 4000)
  public void test_updatePassword_14()  throws Throwable  {
      UmsAdminController umsAdminController0 = new UmsAdminController();

      //prepare data for umsAdminService0
      UmsAdminService umsAdminService0 = mock(UmsAdminService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-2)).when(umsAdminService0).updatePassword(nullable(com.macro.mall.dto.UpdateAdminPasswordParam.class));

      //invoke method for umsAdminController0
      PrivateAccess.setVariable((Class<?>) UmsAdminController.class, umsAdminController0, "adminService", (Object) umsAdminService0);
      UpdateAdminPasswordParam updateAdminPasswordParam0 = mock(UpdateAdminPasswordParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      CommonResult commonResult0 = umsAdminController0.updatePassword(updateAdminPasswordParam0);
      assertEquals("\u627E\u4E0D\u5230\u8BE5\u7528\u6237", commonResult0.getMessage());
  }
  @Test(timeout = 4000)
  public void test_updatePassword_15()  throws Throwable  {
      UmsAdminController umsAdminController0 = new UmsAdminController();

      //prepare data for umsAdminService0
      UmsAdminService umsAdminService0 = mock(UmsAdminService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-3)).when(umsAdminService0).updatePassword(nullable(com.macro.mall.dto.UpdateAdminPasswordParam.class));

      //invoke method for umsAdminController0
      PrivateAccess.setVariable((Class<?>) UmsAdminController.class, umsAdminController0, "adminService", (Object) umsAdminService0);
      UpdateAdminPasswordParam updateAdminPasswordParam0 = mock(UpdateAdminPasswordParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      CommonResult commonResult0 = umsAdminController0.updatePassword(updateAdminPasswordParam0);
      assertEquals("\u65E7\u5BC6\u7801\u9519\u8BEF", commonResult0.getMessage());
  }
  @Test(timeout = 4000)
  public void test_updatePassword_16()  throws Throwable  {
      UmsAdminController umsAdminController0 = new UmsAdminController();

      //prepare data for umsAdminService0
      UmsAdminService umsAdminService0 = mock(UmsAdminService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(umsAdminService0).updatePassword(nullable(com.macro.mall.dto.UpdateAdminPasswordParam.class));

      //invoke method for umsAdminController0
      PrivateAccess.setVariable((Class<?>) UmsAdminController.class, umsAdminController0, "adminService", (Object) umsAdminService0);
      UpdateAdminPasswordParam updateAdminPasswordParam0 = mock(UpdateAdminPasswordParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      CommonResult commonResult0 = umsAdminController0.updatePassword(updateAdminPasswordParam0);
      assertEquals("\u64CD\u4F5C\u5931\u8D25", commonResult0.getMessage());
  }
  @Test(timeout = 4000)
  public void test_login_17()  throws Throwable  {
      UmsAdminController umsAdminController0 = new UmsAdminController();

      //prepare data for umsAdminService0
      UmsAdminService umsAdminService0 = mock(UmsAdminService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("\u63D0\u4EA4\u53C2\u6570\u4E0D\u5408\u6CD5").when(umsAdminService0).login(nullable(java.lang.String.class) , nullable(java.lang.String.class));

      //invoke method for umsAdminController0
      PrivateAccess.setVariable((Class<?>) UmsAdminController.class, umsAdminController0, "adminService", (Object) umsAdminService0);

      //prepare data for umsAdminLoginParam0
      UmsAdminLoginParam umsAdminLoginParam0 = mock(UmsAdminLoginParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("5pS)g,3g").when(umsAdminLoginParam0).getPassword();
      doReturn("OgVT").when(umsAdminLoginParam0).getUsername();
      CommonResult commonResult0 = umsAdminController0.login(umsAdminLoginParam0);
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }
  @Test(timeout = 4000)
  public void test_refreshToken_18()  throws Throwable  {
      UmsAdminController umsAdminController0 = new UmsAdminController();

      //prepare data for umsAdminService0
      UmsAdminService umsAdminService0 = mock(UmsAdminService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("keyFunction").when(umsAdminService0).refreshToken(nullable(java.lang.String.class));

      //invoke method for umsAdminController0
      PrivateAccess.setVariable((Class<?>) UmsAdminController.class, umsAdminController0, "adminService", (Object) umsAdminService0);

      //prepare data for httpServletRequest0
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("icon").when(httpServletRequest0).getHeader(nullable(java.lang.String.class));
      CommonResult commonResult0 = umsAdminController0.refreshToken(httpServletRequest0);
      assertEquals(200L, commonResult0.getCode());
  }
  @Test(timeout = 4000)
  public void test_getAdminInfo_19()  throws Throwable  {
      UmsAdminController umsAdminController0 = new UmsAdminController();

      //prepare data for umsAdminService0
      UmsAdmin umsAdmin0 = mock(UmsAdmin.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      UmsAdminService umsAdminService0 = mock(UmsAdminService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsAdmin0).when(umsAdminService0).getAdminByUsername(nullable(java.lang.String.class));
      UmsRoleService umsRoleService0 = mock(UmsRoleService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

      //invoke method for umsAdminController0
      PrivateAccess.setVariable((Class<?>) UmsAdminController.class, umsAdminController0, "roleService", (Object) umsRoleService0);

      //invoke method for umsAdminController0
      PrivateAccess.setVariable((Class<?>) UmsAdminController.class, umsAdminController0, "adminService", (Object) umsAdminService0);

      //prepare data for principal0
      Principal principal0 = mock(Principal.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(principal0).getName();
      CommonResult commonResult0 = umsAdminController0.getAdminInfo(principal0);
      assertEquals(200L, commonResult0.getCode());
  }
  @Test(timeout = 4000)
  public void test_getAdminInfo_20()  throws Throwable  {
      UmsAdminController umsAdminController0 = new UmsAdminController();

      //prepare data for umsAdminService0
      UmsAdmin umsAdmin0 = new UmsAdmin();
      ArrayList<UmsRole> arrayList0 = new ArrayList<UmsRole>();
      UmsRole umsRole0 = new UmsRole();
      arrayList0.add(umsRole0);
      UmsAdminService umsAdminService0 = mock(UmsAdminService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(umsAdmin0).when(umsAdminService0).getAdminByUsername(nullable(java.lang.String.class));
      doReturn(arrayList0).when(umsAdminService0).getRoleList(nullable(java.lang.Long.class));

      //prepare data for umsRoleService0
      Stack<UmsMenu> stack0 = new Stack<UmsMenu>();
      UmsRoleService umsRoleService0 = mock(UmsRoleService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(umsRoleService0).getMenuList(nullable(java.lang.Long.class));

      //invoke method for umsAdminController0
      PrivateAccess.setVariable((Class<?>) UmsAdminController.class, umsAdminController0, "roleService", (Object) umsRoleService0);

      //invoke method for umsAdminController0
      PrivateAccess.setVariable((Class<?>) UmsAdminController.class, umsAdminController0, "adminService", (Object) umsAdminService0);

      //prepare data for principal0
      Principal principal0 = mock(Principal.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("menus").when(principal0).getName();
      CommonResult commonResult0 = umsAdminController0.getAdminInfo(principal0);
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }}
