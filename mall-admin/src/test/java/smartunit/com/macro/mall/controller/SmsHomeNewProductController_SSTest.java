/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.common.api.CommonPage;
import com.macro.mall.common.api.CommonResult;
import com.macro.mall.controller.SmsHomeNewProductController;
import com.macro.mall.model.SmsHomeNewProduct;
import com.macro.mall.service.SmsHomeNewProductService;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Stack;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SmsHomeNewProductController_SSTest extends SmsHomeNewProductController_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_list_0()  throws Throwable  {
      SmsHomeNewProductController smsHomeNewProductController0 = new SmsHomeNewProductController();

      //prepare data for smsHomeNewProductService0
      Stack<SmsHomeNewProduct> stack0 = new Stack<SmsHomeNewProduct>();
      SmsHomeNewProductService smsHomeNewProductService0 = mock(SmsHomeNewProductService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(smsHomeNewProductService0).list(nullable(java.lang.String.class) , nullable(java.lang.Integer.class) , nullable(java.lang.Integer.class) , nullable(java.lang.Integer.class));

      //invoke method for smsHomeNewProductController0
      PrivateAccess.setVariable((Class<?>) SmsHomeNewProductController.class, smsHomeNewProductController0, "homeNewProductService", (Object) smsHomeNewProductService0);
      Integer integer0 = new Integer((-1));
      CommonResult<CommonPage<SmsHomeNewProduct>> commonResult0 = smsHomeNewProductController0.list("1.0", integer0, integer0, integer0);
      assertEquals(200L, commonResult0.getCode());
  }
  @Test(timeout = 4000)
  public void test_updateRecommendStatus_1()  throws Throwable  {
      SmsHomeNewProductController smsHomeNewProductController0 = new SmsHomeNewProductController();

      //prepare data for smsHomeNewProductService0
      SmsHomeNewProductService smsHomeNewProductService0 = mock(SmsHomeNewProductService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(smsHomeNewProductService0).updateRecommendStatus(ArgumentMatchers.<java.lang.Long>anyList() , nullable(java.lang.Integer.class));

      //invoke method for smsHomeNewProductController0
      PrivateAccess.setVariable((Class<?>) SmsHomeNewProductController.class, smsHomeNewProductController0, "homeNewProductService", (Object) smsHomeNewProductService0);
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      Integer integer0 = Integer.valueOf(0);
      CommonResult commonResult0 = smsHomeNewProductController0.updateRecommendStatus(arrayList0, integer0);
      assertEquals("\u64CD\u4F5C\u5931\u8D25", commonResult0.getMessage());
  }
  @Test(timeout = 4000)
  public void test_updateRecommendStatus_2()  throws Throwable  {
      SmsHomeNewProductController smsHomeNewProductController0 = new SmsHomeNewProductController();

      //prepare data for smsHomeNewProductService0
      SmsHomeNewProductService smsHomeNewProductService0 = mock(SmsHomeNewProductService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(59).when(smsHomeNewProductService0).updateRecommendStatus(ArgumentMatchers.<java.lang.Long>anyList() , nullable(java.lang.Integer.class));

      //invoke method for smsHomeNewProductController0
      PrivateAccess.setVariable((Class<?>) SmsHomeNewProductController.class, smsHomeNewProductController0, "homeNewProductService", (Object) smsHomeNewProductService0);
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      Integer integer0 = new Integer(0);
      CommonResult commonResult0 = smsHomeNewProductController0.updateRecommendStatus(arrayList0, integer0);
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }
  @Test(timeout = 4000)
  public void test_create_3()  throws Throwable  {
      SmsHomeNewProductController smsHomeNewProductController0 = new SmsHomeNewProductController();

      //prepare data for smsHomeNewProductService0
      SmsHomeNewProductService smsHomeNewProductService0 = mock(SmsHomeNewProductService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(83).when(smsHomeNewProductService0).create(ArgumentMatchers.<com.macro.mall.model.SmsHomeNewProduct>anyList());

      //invoke method for smsHomeNewProductController0
      PrivateAccess.setVariable((Class<?>) SmsHomeNewProductController.class, smsHomeNewProductController0, "homeNewProductService", (Object) smsHomeNewProductService0);
      Stack<SmsHomeNewProduct> stack0 = new Stack<SmsHomeNewProduct>();
      CommonResult commonResult0 = smsHomeNewProductController0.create(stack0);
      assertEquals(200L, commonResult0.getCode());
  }
  @Test(timeout = 4000)
  public void test_delete_4()  throws Throwable  {
      SmsHomeNewProductController smsHomeNewProductController0 = new SmsHomeNewProductController();

      //prepare data for smsHomeNewProductService0
      SmsHomeNewProductService smsHomeNewProductService0 = mock(SmsHomeNewProductService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(21).when(smsHomeNewProductService0).delete(ArgumentMatchers.<java.lang.Long>anyList());

      //invoke method for smsHomeNewProductController0
      PrivateAccess.setVariable((Class<?>) SmsHomeNewProductController.class, smsHomeNewProductController0, "homeNewProductService", (Object) smsHomeNewProductService0);
      Stack<Long> stack0 = new Stack<Long>();
      CommonResult commonResult0 = smsHomeNewProductController0.delete(stack0);
      assertEquals(200L, commonResult0.getCode());
  }
  @Test(timeout = 4000)
  public void test_delete_5()  throws Throwable  {
      SmsHomeNewProductController smsHomeNewProductController0 = new SmsHomeNewProductController();

      //prepare data for smsHomeNewProductService0
      SmsHomeNewProductService smsHomeNewProductService0 = mock(SmsHomeNewProductService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(smsHomeNewProductService0).delete(ArgumentMatchers.<java.lang.Long>anyList());

      //invoke method for smsHomeNewProductController0
      PrivateAccess.setVariable((Class<?>) SmsHomeNewProductController.class, smsHomeNewProductController0, "homeNewProductService", (Object) smsHomeNewProductService0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      CommonResult commonResult0 = smsHomeNewProductController0.delete(linkedList0);
      assertEquals(500L, commonResult0.getCode());
  }
  @Test(timeout = 4000)
  public void test_create_6()  throws Throwable  {
      SmsHomeNewProductController smsHomeNewProductController0 = new SmsHomeNewProductController();

      //prepare data for smsHomeNewProductService0
      SmsHomeNewProductService smsHomeNewProductService0 = mock(SmsHomeNewProductService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(0).when(smsHomeNewProductService0).create(ArgumentMatchers.<com.macro.mall.model.SmsHomeNewProduct>anyList());

      //invoke method for smsHomeNewProductController0
      PrivateAccess.setVariable((Class<?>) SmsHomeNewProductController.class, smsHomeNewProductController0, "homeNewProductService", (Object) smsHomeNewProductService0);
      ArrayList<SmsHomeNewProduct> arrayList0 = new ArrayList<SmsHomeNewProduct>();
      CommonResult commonResult0 = smsHomeNewProductController0.create(arrayList0);
      assertEquals(500L, commonResult0.getCode());
  }
  @Test(timeout = 4000)
  public void test_updateSort_7()  throws Throwable  {
      SmsHomeNewProductController smsHomeNewProductController0 = new SmsHomeNewProductController();

      //prepare data for smsHomeNewProductService0
      SmsHomeNewProductService smsHomeNewProductService0 = mock(SmsHomeNewProductService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(45).when(smsHomeNewProductService0).updateSort(nullable(java.lang.Long.class) , nullable(java.lang.Integer.class));

      //invoke method for smsHomeNewProductController0
      PrivateAccess.setVariable((Class<?>) SmsHomeNewProductController.class, smsHomeNewProductController0, "homeNewProductService", (Object) smsHomeNewProductService0);
      Long long0 = new Long(433L);
      Integer integer0 = new Integer(0);
      CommonResult commonResult0 = smsHomeNewProductController0.updateSort(long0, integer0);
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }
  @Test(timeout = 4000)
  public void test_updateSort_8()  throws Throwable  {
      SmsHomeNewProductController smsHomeNewProductController0 = new SmsHomeNewProductController();

      //prepare data for smsHomeNewProductService0
      SmsHomeNewProductService smsHomeNewProductService0 = mock(SmsHomeNewProductService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(smsHomeNewProductService0).updateSort(nullable(java.lang.Long.class) , nullable(java.lang.Integer.class));

      //invoke method for smsHomeNewProductController0
      PrivateAccess.setVariable((Class<?>) SmsHomeNewProductController.class, smsHomeNewProductController0, "homeNewProductService", (Object) smsHomeNewProductService0);
      Long long0 = new Long((-1));
      Integer integer0 = new Integer((-1));
      CommonResult commonResult0 = smsHomeNewProductController0.updateSort(long0, integer0);
      assertEquals(500L, commonResult0.getCode());
  }}
