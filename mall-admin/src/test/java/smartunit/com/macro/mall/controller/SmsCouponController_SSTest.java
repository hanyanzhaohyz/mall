/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import com.macro.mall.common.api.CommonPage;
import com.macro.mall.common.api.CommonResult;
import com.macro.mall.controller.SmsCouponController;
import com.macro.mall.dto.SmsCouponParam;
import com.macro.mall.model.SmsCoupon;
import com.macro.mall.service.SmsCouponService;
import java.util.Stack;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class SmsCouponController_SSTest extends SmsCouponController_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_list_0()  throws Throwable  {
      SmsCouponController smsCouponController0 = new SmsCouponController();

      //prepare data for smsCouponService0
      Stack<SmsCoupon> stack0 = new Stack<SmsCoupon>();
      SmsCouponService smsCouponService0 = mock(SmsCouponService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(smsCouponService0).list(nullable(java.lang.String.class) , nullable(java.lang.Integer.class) , nullable(java.lang.Integer.class) , nullable(java.lang.Integer.class));

      //invoke method for smsCouponController0
      PrivateAccess.setVariable((Class<?>) SmsCouponController.class, smsCouponController0, "couponService", (Object) smsCouponService0);
      Integer integer0 = new Integer((-65537));
      CommonResult<CommonPage<SmsCoupon>> commonResult0 = smsCouponController0.list("", integer0, integer0, (Integer) null);
      assertEquals(200L, commonResult0.getCode());
  }
  @Test(timeout = 4000)
  public void test_getItem_1()  throws Throwable  {
      SmsCouponController smsCouponController0 = new SmsCouponController();

      //prepare data for smsCouponService0
      SmsCouponParam smsCouponParam0 = mock(SmsCouponParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      SmsCouponService smsCouponService0 = mock(SmsCouponService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(smsCouponParam0).when(smsCouponService0).getItem(nullable(java.lang.Long.class));

      //invoke method for smsCouponController0
      PrivateAccess.setVariable((Class<?>) SmsCouponController.class, smsCouponController0, "couponService", (Object) smsCouponService0);
      Long long0 = new Long(2505L);
      CommonResult<SmsCouponParam> commonResult0 = smsCouponController0.getItem(long0);
      assertEquals(200L, commonResult0.getCode());
  }
  @Test(timeout = 4000)
  public void test_update_2()  throws Throwable  {
      SmsCouponController smsCouponController0 = new SmsCouponController();

      //prepare data for smsCouponService0
      SmsCouponService smsCouponService0 = mock(SmsCouponService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(3090).when(smsCouponService0).update(nullable(java.lang.Long.class) , nullable(com.macro.mall.dto.SmsCouponParam.class));

      //invoke method for smsCouponController0
      PrivateAccess.setVariable((Class<?>) SmsCouponController.class, smsCouponController0, "couponService", (Object) smsCouponService0);
      Long long0 = new Long(0L);
      SmsCouponParam smsCouponParam0 = mock(SmsCouponParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      CommonResult commonResult0 = smsCouponController0.update(long0, smsCouponParam0);
      assertEquals(200L, commonResult0.getCode());
  }
  @Test(timeout = 4000)
  public void test_delete_3()  throws Throwable  {
      SmsCouponController smsCouponController0 = new SmsCouponController();

      //prepare data for smsCouponService0
      SmsCouponService smsCouponService0 = mock(SmsCouponService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(smsCouponService0).delete(nullable(java.lang.Long.class));

      //invoke method for smsCouponController0
      PrivateAccess.setVariable((Class<?>) SmsCouponController.class, smsCouponController0, "couponService", (Object) smsCouponService0);
      Long long0 = new Long(1);
      CommonResult commonResult0 = smsCouponController0.delete(long0);
      assertEquals(200L, commonResult0.getCode());
  }
  @Test(timeout = 4000)
  public void test_delete_4()  throws Throwable  {
      SmsCouponController smsCouponController0 = new SmsCouponController();

      //prepare data for smsCouponService0
      SmsCouponService smsCouponService0 = mock(SmsCouponService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1)).when(smsCouponService0).delete(nullable(java.lang.Long.class));

      //invoke method for smsCouponController0
      PrivateAccess.setVariable((Class<?>) SmsCouponController.class, smsCouponController0, "couponService", (Object) smsCouponService0);
      Long long0 = new Long(0L);
      CommonResult commonResult0 = smsCouponController0.delete(long0);
      assertEquals("\u64CD\u4F5C\u5931\u8D25", commonResult0.getMessage());
  }
  @Test(timeout = 4000)
  public void test_add_5()  throws Throwable  {
      SmsCouponController smsCouponController0 = new SmsCouponController();

      //prepare data for smsCouponService0
      SmsCouponService smsCouponService0 = mock(SmsCouponService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(542).when(smsCouponService0).create(nullable(com.macro.mall.dto.SmsCouponParam.class));

      //invoke method for smsCouponController0
      PrivateAccess.setVariable((Class<?>) SmsCouponController.class, smsCouponController0, "couponService", (Object) smsCouponService0);
      SmsCouponParam smsCouponParam0 = mock(SmsCouponParam.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      CommonResult commonResult0 = smsCouponController0.add(smsCouponParam0);
      assertEquals("\u64CD\u4F5C\u6210\u529F", commonResult0.getMessage());
  }}
