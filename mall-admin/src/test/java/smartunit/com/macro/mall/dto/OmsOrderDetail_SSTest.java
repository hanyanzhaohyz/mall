/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.macro.mall.dto;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.macro.mall.dto.OmsOrderDetail;
import com.macro.mall.model.OmsOrderItem;
import com.macro.mall.model.OmsOrderOperateHistory;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.junit.runner.RunWith;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class OmsOrderDetail_SSTest extends OmsOrderDetail_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_setOrderItemList_0()  throws Throwable  {
      OmsOrderDetail omsOrderDetail0 = new OmsOrderDetail();
      Stack<OmsOrderItem> stack0 = new Stack<OmsOrderItem>();

      //invoke method for omsOrderDetail0
      omsOrderDetail0.setOrderItemList(stack0);

      //invoke method for omsOrderDetail0
      assertNull(omsOrderDetail0.getBillType());
  }
  @Test(timeout = 4000)
  public void test_setHistoryList_1()  throws Throwable  {
      OmsOrderDetail omsOrderDetail0 = new OmsOrderDetail();
      Vector<OmsOrderOperateHistory> vector0 = new Vector<OmsOrderOperateHistory>();

      //invoke method for omsOrderDetail0
      omsOrderDetail0.setHistoryList(vector0);

      //invoke method for omsOrderDetail0
      assertNull(omsOrderDetail0.getDeliverySn());
  }
  @Test(timeout = 4000)
  public void test_getHistoryList_2()  throws Throwable  {
      OmsOrderDetail omsOrderDetail0 = new OmsOrderDetail();
      ArrayList<OmsOrderOperateHistory> arrayList0 = new ArrayList<OmsOrderOperateHistory>();

      //invoke method for omsOrderDetail0
      PrivateAccess.setVariable((Class<?>) OmsOrderDetail.class, omsOrderDetail0, "historyList", (Object) arrayList0);
      List<OmsOrderOperateHistory> list0 = omsOrderDetail0.getHistoryList();
      assertTrue(list0.isEmpty());
  }
  @Test(timeout = 4000)
  public void test_getOrderItemList_3()  throws Throwable  {
      OmsOrderDetail omsOrderDetail0 = new OmsOrderDetail();
      Stack<OmsOrderItem> stack0 = new Stack<OmsOrderItem>();

      //invoke method for omsOrderDetail0
      PrivateAccess.setVariable((Class<?>) OmsOrderDetail.class, omsOrderDetail0, "orderItemList", (Object) stack0);
      List<OmsOrderItem> list0 = omsOrderDetail0.getOrderItemList();
      assertTrue(list0.isEmpty());
  }}
